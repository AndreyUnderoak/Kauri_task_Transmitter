
KauriTransmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002cb4  08002cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ccc  08002ccc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ccc  08002ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cd4  08002cd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08002ce8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002ce8  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a425  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ccd  00000000  00000000  0002a461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002cb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015aba  00000000  00000000  0002d440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cac5  00000000  00000000  00042efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008661b  00000000  00000000  0004f9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5fda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  000d602c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002c9c 	.word	0x08002c9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002c9c 	.word	0x08002c9c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80004de:	2300      	movs	r3, #0
 80004e0:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80004ea:	2300      	movs	r3, #0
 80004ec:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 80004ee:	2300      	movs	r3, #0
 80004f0:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80004f2:	2300      	movs	r3, #0
 80004f4:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80004f6:	2300      	movs	r3, #0
 80004f8:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80004fe:	2300      	movs	r3, #0
 8000500:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000502:	2300      	movs	r3, #0
 8000504:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000512:	2308      	movs	r3, #8
 8000514:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 800054e:	2300      	movs	r3, #0
 8000550:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000552:	2308      	movs	r3, #8
 8000554:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000556:	2300      	movs	r3, #0
 8000558:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 800055e:	f000 f939 	bl	80007d4 <MCP2515_Initialize>
 8000562:	4603      	mov	r3, r0
 8000564:	f083 0301 	eor.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <CANSPI_Initialize+0x9a>
  {
    return false;
 800056e:	2300      	movs	r3, #0
 8000570:	e05e      	b.n	8000630 <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000572:	f000 f951 	bl	8000818 <MCP2515_SetConfigMode>
 8000576:	4603      	mov	r3, r0
 8000578:	f083 0301 	eor.w	r3, r3, #1
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <CANSPI_Initialize+0xae>
  {
    return false;
 8000582:	2300      	movs	r3, #0
 8000584:	e054      	b.n	8000630 <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	461a      	mov	r2, r3
 800058a:	2123      	movs	r1, #35	; 0x23
 800058c:	2020      	movs	r0, #32
 800058e:	f000 f9c5 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000592:	463b      	mov	r3, r7
 8000594:	461a      	mov	r2, r3
 8000596:	2127      	movs	r1, #39	; 0x27
 8000598:	2024      	movs	r0, #36	; 0x24
 800059a:	f000 f9bf 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	461a      	mov	r2, r3
 80005a4:	2103      	movs	r1, #3
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f9b8 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	461a      	mov	r2, r3
 80005b2:	2107      	movs	r1, #7
 80005b4:	2004      	movs	r0, #4
 80005b6:	f000 f9b1 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	461a      	mov	r2, r3
 80005c0:	210b      	movs	r1, #11
 80005c2:	2008      	movs	r0, #8
 80005c4:	f000 f9aa 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	461a      	mov	r2, r3
 80005ce:	2113      	movs	r1, #19
 80005d0:	2010      	movs	r0, #16
 80005d2:	f000 f9a3 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	461a      	mov	r2, r3
 80005dc:	2117      	movs	r1, #23
 80005de:	2014      	movs	r0, #20
 80005e0:	f000 f99c 	bl	800091c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	461a      	mov	r2, r3
 80005ea:	211b      	movs	r1, #27
 80005ec:	2018      	movs	r0, #24
 80005ee:	f000 f995 	bl	800091c <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80005f2:	2104      	movs	r1, #4
 80005f4:	2060      	movs	r0, #96	; 0x60
 80005f6:	f000 f96d 	bl	80008d4 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80005fa:	2101      	movs	r1, #1
 80005fc:	2070      	movs	r0, #112	; 0x70
 80005fe:	f000 f969 	bl	80008d4 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000602:	2100      	movs	r1, #0
 8000604:	202a      	movs	r0, #42	; 0x2a
 8000606:	f000 f965 	bl	80008d4 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800060a:	21e5      	movs	r1, #229	; 0xe5
 800060c:	2029      	movs	r0, #41	; 0x29
 800060e:	f000 f961 	bl	80008d4 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000612:	2183      	movs	r1, #131	; 0x83
 8000614:	2028      	movs	r0, #40	; 0x28
 8000616:	f000 f95d 	bl	80008d4 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800061a:	f000 f91b 	bl	8000854 <MCP2515_SetNormalMode>
 800061e:	4603      	mov	r3, r0
 8000620:	f083 0301 	eor.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <CANSPI_Initialize+0x156>
    return false;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <CANSPI_Initialize+0x158>
  
  return true;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <CANSPI_Transmit+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800064a:	4b35      	ldr	r3, [pc, #212]	; (8000720 <CANSPI_Transmit+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <CANSPI_Transmit+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <CANSPI_Transmit+0xe8>)
 8000658:	2200      	movs	r2, #0
 800065a:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 800065c:	f000 f9cc 	bl	80009f8 <MCP2515_ReadStatus>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <CANSPI_Transmit+0xec>)
 8000666:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <CANSPI_Transmit+0xec>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d115      	bne.n	80006a2 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6858      	ldr	r0, [r3, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4a28      	ldr	r2, [pc, #160]	; (8000720 <CANSPI_Transmit+0xe8>)
 8000680:	4619      	mov	r1, r3
 8000682:	f000 f851 	bl	8000728 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7a1a      	ldrb	r2, [r3, #8]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3309      	adds	r3, #9
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <CANSPI_Transmit+0xe8>)
 8000690:	2040      	movs	r0, #64	; 0x40
 8000692:	f000 f96d 	bl	8000970 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000696:	2081      	movs	r0, #129	; 0x81
 8000698:	f000 f994 	bl	80009c4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e038      	b.n	8000714 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <CANSPI_Transmit+0xec>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f003 0310 	and.w	r3, r3, #16
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d115      	bne.n	80006dc <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6858      	ldr	r0, [r3, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4a19      	ldr	r2, [pc, #100]	; (8000720 <CANSPI_Transmit+0xe8>)
 80006ba:	4619      	mov	r1, r3
 80006bc:	f000 f834 	bl	8000728 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7a1a      	ldrb	r2, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3309      	adds	r3, #9
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <CANSPI_Transmit+0xe8>)
 80006ca:	2042      	movs	r0, #66	; 0x42
 80006cc:	f000 f950 	bl	8000970 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80006d0:	2082      	movs	r0, #130	; 0x82
 80006d2:	f000 f977 	bl	80009c4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e01b      	b.n	8000714 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <CANSPI_Transmit+0xec>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d114      	bne.n	8000714 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6858      	ldr	r0, [r3, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <CANSPI_Transmit+0xe8>)
 80006f4:	4619      	mov	r1, r3
 80006f6:	f000 f817 	bl	8000728 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	7a1a      	ldrb	r2, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3309      	adds	r3, #9
 8000702:	4907      	ldr	r1, [pc, #28]	; (8000720 <CANSPI_Transmit+0xe8>)
 8000704:	2044      	movs	r0, #68	; 0x44
 8000706:	f000 f933 	bl	8000970 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800070a:	2084      	movs	r0, #132	; 0x84
 800070c:	f000 f95a 	bl	80009c4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000002c 	.word	0x2000002c
 8000724:	20000028 	.word	0x20000028

08000728 <convertCANid2Reg>:
  return (returnValue);
}

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000728:	b480      	push	{r7}
 800072a:	b087      	sub	sp, #28
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	460b      	mov	r3, r1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d12e      	bne.n	800079e <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f003 0303 	and.w	r3, r3, #3
 8000764:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f023 031f 	bic.w	r3, r3, #31
 8000774:	b2da      	uxtb	r2, r3
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	4413      	add	r3, r2
 800077a:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800077c:	7dfb      	ldrb	r3, [r7, #23]
 800077e:	3308      	adds	r3, #8
 8000780:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000782:	7dfb      	ldrb	r3, [r7, #23]
 8000784:	f023 0314 	bic.w	r3, r3, #20
 8000788:	b2da      	uxtb	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800079c:	e013      	b.n	80007c6 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	015b      	lsls	r3, r3, #5
 80007ae:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	0a1b      	lsrs	r3, r3, #8
 80007bc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80007da:	2201      	movs	r2, #1
 80007dc:	2110      	movs	r1, #16
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <MCP2515_Initialize+0x3c>)
 80007e0:	f000 fed8 	bl	8001594 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80007e4:	230a      	movs	r3, #10
 80007e6:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <MCP2515_Initialize+0x40>)
 80007ea:	f002 f8ed 	bl	80029c8 <HAL_SPI_GetState>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d101      	bne.n	80007f8 <MCP2515_Initialize+0x24>
      return true;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e006      	b.n	8000806 <MCP2515_Initialize+0x32>
    
    loop--;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1f1      	bne.n	80007e8 <MCP2515_Initialize+0x14>
      
  return false;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40020000 	.word	0x40020000
 8000814:	20000098 	.word	0x20000098

08000818 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	200f      	movs	r0, #15
 8000822:	f000 f857 	bl	80008d4 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000826:	230a      	movs	r3, #10
 8000828:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800082a:	200e      	movs	r0, #14
 800082c:	f000 f830 	bl	8000890 <MCP2515_ReadByte>
 8000830:	4603      	mov	r3, r0
 8000832:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000836:	2b80      	cmp	r3, #128	; 0x80
 8000838:	d101      	bne.n	800083e <MCP2515_SetConfigMode+0x26>
      return true;
 800083a:	2301      	movs	r3, #1
 800083c:	e006      	b.n	800084c <MCP2515_SetConfigMode+0x34>
    
    loop--;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3b01      	subs	r3, #1
 8000842:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1ef      	bne.n	800082a <MCP2515_SetConfigMode+0x12>
  
  return false;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800085a:	2100      	movs	r1, #0
 800085c:	200f      	movs	r0, #15
 800085e:	f000 f839 	bl	80008d4 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000862:	230a      	movs	r3, #10
 8000864:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000866:	200e      	movs	r0, #14
 8000868:	f000 f812 	bl	8000890 <MCP2515_ReadByte>
 800086c:	4603      	mov	r3, r0
 800086e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <MCP2515_SetNormalMode+0x26>
      return true;
 8000876:	2301      	movs	r3, #1
 8000878:	e006      	b.n	8000888 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	3b01      	subs	r3, #1
 800087e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1ef      	bne.n	8000866 <MCP2515_SetNormalMode+0x12>
  
  return false;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800089a:	2200      	movs	r2, #0
 800089c:	2110      	movs	r1, #16
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MCP2515_ReadByte+0x40>)
 80008a0:	f000 fe78 	bl	8001594 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f8c3 	bl	8000a30 <SPI_Tx>
  SPI_Tx(address);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f8bf 	bl	8000a30 <SPI_Tx>
  retVal = SPI_Rx();
 80008b2:	f000 f8e3 	bl	8000a7c <SPI_Rx>
 80008b6:	4603      	mov	r3, r0
 80008b8:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 80008ba:	2201      	movs	r2, #1
 80008bc:	2110      	movs	r1, #16
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MCP2515_ReadByte+0x40>)
 80008c0:	f000 fe68 	bl	8001594 <HAL_GPIO_WritePin>
  
  return retVal;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40020000 	.word	0x40020000

080008d4 <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	460a      	mov	r2, r1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80008e4:	2200      	movs	r2, #0
 80008e6:	2110      	movs	r1, #16
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <MCP2515_WriteByte+0x44>)
 80008ea:	f000 fe53 	bl	8001594 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f000 f89e 	bl	8000a30 <SPI_Tx>
  SPI_Tx(address);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f89a 	bl	8000a30 <SPI_Tx>
  SPI_Tx(data);  
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f896 	bl	8000a30 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8000904:	2201      	movs	r2, #1
 8000906:	2110      	movs	r1, #16
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <MCP2515_WriteByte+0x44>)
 800090a:	f000 fe43 	bl	8001594 <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020000 	.word	0x40020000

0800091c <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	603a      	str	r2, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	460b      	mov	r3, r1
 800092a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800092c:	2200      	movs	r2, #0
 800092e:	2110      	movs	r1, #16
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <MCP2515_WriteByteSequence+0x50>)
 8000932:	f000 fe2f 	bl	8001594 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000936:	2002      	movs	r0, #2
 8000938:	f000 f87a 	bl	8000a30 <SPI_Tx>
  SPI_Tx(startAddress);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f876 	bl	8000a30 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000944:	79ba      	ldrb	r2, [r7, #6]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	3301      	adds	r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	6838      	ldr	r0, [r7, #0]
 8000954:	f000 f87e 	bl	8000a54 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <MCP2515_WriteByteSequence+0x50>)
 800095e:	f000 fe19 	bl	8001594 <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40020000 	.word	0x40020000

08000970 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4603      	mov	r3, r0
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	4613      	mov	r3, r2
 8000980:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000982:	2200      	movs	r2, #0
 8000984:	2110      	movs	r1, #16
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <MCP2515_LoadTxSequence+0x50>)
 8000988:	f000 fe04 	bl	8001594 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f84e 	bl	8000a30 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000994:	2104      	movs	r1, #4
 8000996:	68b8      	ldr	r0, [r7, #8]
 8000998:	f000 f85c 	bl	8000a54 <SPI_TxBuffer>
  SPI_Tx(dlc);
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f846 	bl	8000a30 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80009a4:	7bbb      	ldrb	r3, [r7, #14]
 80009a6:	4619      	mov	r1, r3
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f853 	bl	8000a54 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 80009ae:	2201      	movs	r2, #1
 80009b0:	2110      	movs	r1, #16
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <MCP2515_LoadTxSequence+0x50>)
 80009b4:	f000 fdee 	bl	8001594 <HAL_GPIO_WritePin>
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40020000 	.word	0x40020000

080009c4 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80009ce:	2200      	movs	r2, #0
 80009d0:	2110      	movs	r1, #16
 80009d2:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MCP2515_RequestToSend+0x30>)
 80009d4:	f000 fdde 	bl	8001594 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f828 	bl	8000a30 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 80009e0:	2201      	movs	r2, #1
 80009e2:	2110      	movs	r1, #16
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MCP2515_RequestToSend+0x30>)
 80009e6:	f000 fdd5 	bl	8001594 <HAL_GPIO_WritePin>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40020000 	.word	0x40020000

080009f8 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80009fe:	2200      	movs	r2, #0
 8000a00:	2110      	movs	r1, #16
 8000a02:	480a      	ldr	r0, [pc, #40]	; (8000a2c <MCP2515_ReadStatus+0x34>)
 8000a04:	f000 fdc6 	bl	8001594 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8000a08:	20a0      	movs	r0, #160	; 0xa0
 8000a0a:	f000 f811 	bl	8000a30 <SPI_Tx>
  retVal = SPI_Rx();
 8000a0e:	f000 f835 	bl	8000a7c <SPI_Rx>
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000a16:	2201      	movs	r2, #1
 8000a18:	2110      	movs	r1, #16
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MCP2515_ReadStatus+0x34>)
 8000a1c:	f000 fdba 	bl	8001594 <HAL_GPIO_WritePin>
  
  return retVal;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40020000 	.word	0x40020000

08000a30 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000a3a:	1df9      	adds	r1, r7, #7
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <SPI_Tx+0x20>)
 8000a42:	f001 fbd2 	bl	80021ea <HAL_SPI_Transmit>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000098 	.word	0x20000098

08000a54 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	230a      	movs	r3, #10
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <SPI_TxBuffer+0x24>)
 8000a6a:	f001 fbbe 	bl	80021ea <HAL_SPI_Transmit>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000098 	.word	0x20000098

08000a7c <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000a82:	1df9      	adds	r1, r7, #7
 8000a84:	230a      	movs	r3, #10
 8000a86:	2201      	movs	r2, #1
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <SPI_Rx+0x1c>)
 8000a8a:	f001 fcea 	bl	8002462 <HAL_SPI_Receive>
  return retVal;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000098 	.word	0x20000098

08000a9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_GPIO_Init+0x98>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a1e      	ldr	r2, [pc, #120]	; (8000b34 <MX_GPIO_Init+0x98>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_GPIO_Init+0x98>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_GPIO_Init+0x98>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <MX_GPIO_Init+0x98>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_GPIO_Init+0x98>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_GPIO_Init+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x98>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_GPIO_Init+0x98>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2110      	movs	r1, #16
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <MX_GPIO_Init+0x9c>)
 8000b0c:	f000 fd42 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000b10:	2310      	movs	r3, #16
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_GPIO_Init+0x9c>)
 8000b28:	f000 fbb0 	bl	800128c <HAL_GPIO_Init>

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000

08000b3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_I2C1_Init+0x54>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x58>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b7a:	f000 fd25 	bl	80015c8 <HAL_I2C_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 f8f4 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000030 	.word	0x20000030
 8000b90:	40005400 	.word	0x40005400
 8000b94:	000186a0 	.word	0x000186a0

08000b98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_I2C_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12b      	bne.n	8000c12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd6:	23c0      	movs	r3, #192	; 0xc0
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be6:	2304      	movs	r3, #4
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <HAL_I2C_MspInit+0x8c>)
 8000bf2:	f000 fb4b 	bl	800128c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2c:	f000 f9b2 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c30:	f000 f834 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c34:	f7ff ff32 	bl	8000a9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c38:	f7ff ff80 	bl	8000b3c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c3c:	f000 f89e 	bl	8000d7c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 8000c40:	f7ff fc4a 	bl	80004d8 <CANSPI_Initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <main+0x70>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
	  txMessage.frame.id = 0x0A;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <main+0x70>)
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	605a      	str	r2, [r3, #4]
	  txMessage.frame.dlc = 8;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <main+0x70>)
 8000c52:	2208      	movs	r2, #8
 8000c54:	721a      	strb	r2, [r3, #8]
	  txMessage.frame.data0 = 0;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <main+0x70>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	725a      	strb	r2, [r3, #9]
	  txMessage.frame.data1 = 1;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <main+0x70>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	729a      	strb	r2, [r3, #10]
	  txMessage.frame.data2 = 2;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <main+0x70>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	72da      	strb	r2, [r3, #11]
	  txMessage.frame.data3 = 3;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <main+0x70>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	731a      	strb	r2, [r3, #12]
	  txMessage.frame.data4 = 4;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <main+0x70>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	735a      	strb	r2, [r3, #13]
	  txMessage.frame.data5 = 5;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <main+0x70>)
 8000c76:	2205      	movs	r2, #5
 8000c78:	739a      	strb	r2, [r3, #14]
	  txMessage.frame.data6 = 6;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <main+0x70>)
 8000c7c:	2206      	movs	r2, #6
 8000c7e:	73da      	strb	r2, [r3, #15]
	  txMessage.frame.data7 = 7;
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <main+0x70>)
 8000c82:	2207      	movs	r2, #7
 8000c84:	741a      	strb	r2, [r3, #16]
	  CANSPI_Transmit(&txMessage);
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <main+0x70>)
 8000c88:	f7ff fcd6 	bl	8000638 <CANSPI_Transmit>

	  HAL_Delay(1000);
 8000c8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c90:	f000 f9f2 	bl	8001078 <HAL_Delay>
	  txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000c94:	e7d6      	b.n	8000c44 <main+0x1c>
 8000c96:	bf00      	nop
 8000c98:	20000084 	.word	0x20000084

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	; 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2230      	movs	r2, #48	; 0x30
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 ffee 	bl	8002c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <SystemClock_Config+0xd0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <SystemClock_Config+0xd0>)
 8000cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <SystemClock_Config+0xd0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d10:	2319      	movs	r3, #25
 8000d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0320 	add.w	r3, r7, #32
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fd93 	bl	8001850 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d30:	f000 f81e 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fff5 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d5c:	f000 f808 	bl	8000d70 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3750      	adds	r7, #80	; 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40007000 	.word	0x40007000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000d82:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <MX_SPI1_Init+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000dc8:	220a      	movs	r2, #10
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_SPI1_Init+0x64>)
 8000dce:	f001 f983 	bl	80020d8 <HAL_SPI_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dd8:	f7ff ffca 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000098 	.word	0x20000098
 8000de4:	40013000 	.word	0x40013000

08000de8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_SPI_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12b      	bne.n	8000e62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_SPI_MspInit+0x88>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_SPI_MspInit+0x88>)
 8000e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_SPI_MspInit+0x88>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_SPI_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <HAL_SPI_MspInit+0x88>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_SPI_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e42:	23e0      	movs	r3, #224	; 0xe0
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e52:	2305      	movs	r3, #5
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <HAL_SPI_MspInit+0x8c>)
 8000e5e:	f000 fa15 	bl	800128c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40013000 	.word	0x40013000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f890 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f46:	490e      	ldr	r1, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f5c:	4c0b      	ldr	r4, [pc, #44]	; (8000f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6a:	f7ff ffd7 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f001 fe69 	bl	8002c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fe59 	bl	8000c28 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f84:	08002cdc 	.word	0x08002cdc
  ldr r2, =_sbss
 8000f88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f8c:	200000f4 	.word	0x200000f4

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f931 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff ff56 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f93b 	bl	8001272 <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 f911 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	200000f0 	.word	0x200000f0

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200000f0 	.word	0x200000f0

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff47 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff5c 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb0 	bl	80011e0 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	e159      	b.n	800155c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8148 	bne.w	8001556 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d005      	beq.n	80012de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b03      	cmp	r3, #3
 800134a:	d017      	beq.n	800137c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d123      	bne.n	80013d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	69b9      	ldr	r1, [r7, #24]
 80013cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a2 	beq.w	8001556 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b57      	ldr	r3, [pc, #348]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a56      	ldr	r2, [pc, #344]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b54      	ldr	r3, [pc, #336]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142e:	4a52      	ldr	r2, [pc, #328]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a49      	ldr	r2, [pc, #292]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d019      	beq.n	800148e <HAL_GPIO_Init+0x202>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a48      	ldr	r2, [pc, #288]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x1fe>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a47      	ldr	r2, [pc, #284]	; (8001584 <HAL_GPIO_Init+0x2f8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x1fa>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a46      	ldr	r2, [pc, #280]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x1f6>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a45      	ldr	r2, [pc, #276]	; (800158c <HAL_GPIO_Init+0x300>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x1f2>
 800147a:	2304      	movs	r3, #4
 800147c:	e008      	b.n	8001490 <HAL_GPIO_Init+0x204>
 800147e:	2307      	movs	r3, #7
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x204>
 8001482:	2303      	movs	r3, #3
 8001484:	e004      	b.n	8001490 <HAL_GPIO_Init+0x204>
 8001486:	2302      	movs	r3, #2
 8001488:	e002      	b.n	8001490 <HAL_GPIO_Init+0x204>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x204>
 800148e:	2300      	movs	r3, #0
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	f002 0203 	and.w	r2, r2, #3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4093      	lsls	r3, r2
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a0:	4935      	ldr	r1, [pc, #212]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d2:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014fc:	4a24      	ldr	r2, [pc, #144]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001526:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_GPIO_Init+0x304>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	f67f aea2 	bls.w	80012a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40013800 	.word	0x40013800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020800 	.word	0x40020800
 8001588:	40020c00 	.word	0x40020c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40013c00 	.word	0x40013c00

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b0:	e003      	b.n	80015ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e12b      	b.n	8001832 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fad2 	bl	8000b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800161a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800162a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800162c:	f000 fd40 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8001630:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4a81      	ldr	r2, [pc, #516]	; (800183c <HAL_I2C_Init+0x274>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d807      	bhi.n	800164c <HAL_I2C_Init+0x84>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a80      	ldr	r2, [pc, #512]	; (8001840 <HAL_I2C_Init+0x278>)
 8001640:	4293      	cmp	r3, r2
 8001642:	bf94      	ite	ls
 8001644:	2301      	movls	r3, #1
 8001646:	2300      	movhi	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	e006      	b.n	800165a <HAL_I2C_Init+0x92>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4a7d      	ldr	r2, [pc, #500]	; (8001844 <HAL_I2C_Init+0x27c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	bf94      	ite	ls
 8001654:	2301      	movls	r3, #1
 8001656:	2300      	movhi	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0e7      	b.n	8001832 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4a78      	ldr	r2, [pc, #480]	; (8001848 <HAL_I2C_Init+0x280>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0c9b      	lsrs	r3, r3, #18
 800166c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a6a      	ldr	r2, [pc, #424]	; (800183c <HAL_I2C_Init+0x274>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d802      	bhi.n	800169c <HAL_I2C_Init+0xd4>
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	3301      	adds	r3, #1
 800169a:	e009      	b.n	80016b0 <HAL_I2C_Init+0xe8>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	4a69      	ldr	r2, [pc, #420]	; (800184c <HAL_I2C_Init+0x284>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	3301      	adds	r3, #1
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	495c      	ldr	r1, [pc, #368]	; (800183c <HAL_I2C_Init+0x274>)
 80016cc:	428b      	cmp	r3, r1
 80016ce:	d819      	bhi.n	8001704 <HAL_I2C_Init+0x13c>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1e59      	subs	r1, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fbb1 f3f3 	udiv	r3, r1, r3
 80016de:	1c59      	adds	r1, r3, #1
 80016e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016e4:	400b      	ands	r3, r1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00a      	beq.n	8001700 <HAL_I2C_Init+0x138>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1e59      	subs	r1, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016f8:	3301      	adds	r3, #1
 80016fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fe:	e051      	b.n	80017a4 <HAL_I2C_Init+0x1dc>
 8001700:	2304      	movs	r3, #4
 8001702:	e04f      	b.n	80017a4 <HAL_I2C_Init+0x1dc>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d111      	bne.n	8001730 <HAL_I2C_Init+0x168>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1e58      	subs	r0, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	440b      	add	r3, r1
 800171a:	fbb0 f3f3 	udiv	r3, r0, r3
 800171e:	3301      	adds	r3, #1
 8001720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	e012      	b.n	8001756 <HAL_I2C_Init+0x18e>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1e58      	subs	r0, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	0099      	lsls	r1, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	fbb0 f3f3 	udiv	r3, r0, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_I2C_Init+0x196>
 800175a:	2301      	movs	r3, #1
 800175c:	e022      	b.n	80017a4 <HAL_I2C_Init+0x1dc>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10e      	bne.n	8001784 <HAL_I2C_Init+0x1bc>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1e58      	subs	r0, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6859      	ldr	r1, [r3, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	440b      	add	r3, r1
 8001774:	fbb0 f3f3 	udiv	r3, r0, r3
 8001778:	3301      	adds	r3, #1
 800177a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001782:	e00f      	b.n	80017a4 <HAL_I2C_Init+0x1dc>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1e58      	subs	r0, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	0099      	lsls	r1, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	fbb0 f3f3 	udiv	r3, r0, r3
 800179a:	3301      	adds	r3, #1
 800179c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	6809      	ldr	r1, [r1, #0]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69da      	ldr	r2, [r3, #28]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6911      	ldr	r1, [r2, #16]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68d2      	ldr	r2, [r2, #12]
 80017de:	4311      	orrs	r1, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2220      	movs	r2, #32
 800181e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	000186a0 	.word	0x000186a0
 8001840:	001e847f 	.word	0x001e847f
 8001844:	003d08ff 	.word	0x003d08ff
 8001848:	431bde83 	.word	0x431bde83
 800184c:	10624dd3 	.word	0x10624dd3

08001850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e267      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d075      	beq.n	800195a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186e:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b04      	cmp	r3, #4
 8001878:	d00c      	beq.n	8001894 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187a:	4b85      	ldr	r3, [pc, #532]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001882:	2b08      	cmp	r3, #8
 8001884:	d112      	bne.n	80018ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001886:	4b82      	ldr	r3, [pc, #520]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001892:	d10b      	bne.n	80018ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	4b7e      	ldr	r3, [pc, #504]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05b      	beq.n	8001958 <HAL_RCC_OscConfig+0x108>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d157      	bne.n	8001958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e242      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b4:	d106      	bne.n	80018c4 <HAL_RCC_OscConfig+0x74>
 80018b6:	4b76      	ldr	r3, [pc, #472]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a75      	ldr	r2, [pc, #468]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xb0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x98>
 80018ce:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6f      	ldr	r2, [pc, #444]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6c      	ldr	r2, [pc, #432]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xb0>
 80018e8:	4b69      	ldr	r3, [pc, #420]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a68      	ldr	r2, [pc, #416]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b66      	ldr	r3, [pc, #408]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a65      	ldr	r2, [pc, #404]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fbaa 	bl	8001060 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fba6 	bl	8001060 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e207      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xc0>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fb96 	bl	8001060 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fb92 	bl	8001060 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1f3      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0xe8>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001966:	4b4a      	ldr	r3, [pc, #296]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197e:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x152>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1c7      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4937      	ldr	r1, [pc, #220]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	e03a      	b.n	8001a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <HAL_RCC_OscConfig+0x244>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff fb4b 	bl	8001060 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff fb47 	bl	8001060 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1a8      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4925      	ldr	r1, [pc, #148]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <HAL_RCC_OscConfig+0x244>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff fb2a 	bl	8001060 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff fb26 	bl	8001060 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e187      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d036      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d016      	beq.n	8001a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_RCC_OscConfig+0x248>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff fb0a 	bl	8001060 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fb06 	bl	8001060 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e167      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x200>
 8001a6e:	e01b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_OscConfig+0x248>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff faf3 	bl	8001060 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	e00e      	b.n	8001a9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff faef 	bl	8001060 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d907      	bls.n	8001a9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e150      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
 8001a90:	40023800 	.word	0x40023800
 8001a94:	42470000 	.word	0x42470000
 8001a98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ea      	bne.n	8001a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8097 	beq.w	8001be4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4b81      	ldr	r3, [pc, #516]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10f      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b7d      	ldr	r3, [pc, #500]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a7c      	ldr	r2, [pc, #496]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b77      	ldr	r3, [pc, #476]	; (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af2:	4b74      	ldr	r3, [pc, #464]	; (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a73      	ldr	r2, [pc, #460]	; (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7ff faaf 	bl	8001060 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7ff faab 	bl	8001060 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e10c      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b6a      	ldr	r3, [pc, #424]	; (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x2ea>
 8001b2c:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a63      	ldr	r2, [pc, #396]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
 8001b38:	e01c      	b.n	8001b74 <HAL_RCC_OscConfig+0x324>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x30c>
 8001b42:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	4a5e      	ldr	r2, [pc, #376]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a5b      	ldr	r2, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5a:	e00b      	b.n	8001b74 <HAL_RCC_OscConfig+0x324>
 8001b5c:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	4a57      	ldr	r2, [pc, #348]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6713      	str	r3, [r2, #112]	; 0x70
 8001b68:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a54      	ldr	r2, [pc, #336]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	f023 0304 	bic.w	r3, r3, #4
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d015      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fa70 	bl	8001060 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b84:	f7ff fa6c 	bl	8001060 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0cb      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0ee      	beq.n	8001b84 <HAL_RCC_OscConfig+0x334>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fa5a 	bl	8001060 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fa56 	bl	8001060 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0b5      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1ee      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd8:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a38      	ldr	r2, [pc, #224]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a1 	beq.w	8001d30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d05c      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d141      	bne.n	8001c86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x478>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fa2a 	bl	8001060 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff fa26 	bl	8001060 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e087      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	3b01      	subs	r3, #1
 8001c48:	041b      	lsls	r3, r3, #16
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	491b      	ldr	r1, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x478>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f9ff 	bl	8001060 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff f9fb 	bl	8001060 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e05c      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x416>
 8001c84:	e054      	b.n	8001d30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_OscConfig+0x478>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f9e8 	bl	8001060 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff f9e4 	bl	8001060 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e045      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x444>
 8001cb2:	e03d      	b.n	8001d30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e038      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x4ec>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d028      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d121      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d11a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d111      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	3b01      	subs	r3, #1
 8001d16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0cc      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d90c      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b65      	ldr	r3, [pc, #404]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0b8      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dac:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b50      	ldr	r3, [pc, #320]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	494d      	ldr	r1, [pc, #308]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d044      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d119      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e07f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e067      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b37      	ldr	r3, [pc, #220]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4934      	ldr	r1, [pc, #208]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff f916 	bl	8001060 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f912 	bl	8001060 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e04f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d20c      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e032      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4916      	ldr	r1, [pc, #88]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490e      	ldr	r1, [pc, #56]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ec6:	f000 f821 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	490a      	ldr	r1, [pc, #40]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f876 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08002cb4 	.word	0x08002cb4
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f10:	b090      	sub	sp, #64	; 0x40
 8001f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d00d      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x40>
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	f200 80a1 	bhi.w	8002078 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x34>
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f3e:	e09b      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f44:	e09b      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f46:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f4a:	e098      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d028      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	2200      	movs	r2, #0
 8001f6a:	623b      	str	r3, [r7, #32]
 8001f6c:	627a      	str	r2, [r7, #36]	; 0x24
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f74:	2100      	movs	r1, #0
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f78:	fb03 f201 	mul.w	r2, r3, r1
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	fb00 f303 	mul.w	r3, r0, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	4a43      	ldr	r2, [pc, #268]	; (8002094 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f86:	fba0 1202 	umull	r1, r2, r0, r2
 8001f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f92:	4413      	add	r3, r2
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	61fa      	str	r2, [r7, #28]
 8001f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fa6:	f7fe f915 	bl	80001d4 <__aeabi_uldivmod>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4613      	mov	r3, r2
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb2:	e053      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb4:	4b35      	ldr	r3, [pc, #212]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	2200      	movs	r2, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	617a      	str	r2, [r7, #20]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fc6:	f04f 0b00 	mov.w	fp, #0
 8001fca:	4652      	mov	r2, sl
 8001fcc:	465b      	mov	r3, fp
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0159      	lsls	r1, r3, #5
 8001fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fdc:	0150      	lsls	r0, r2, #5
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	ebb2 080a 	subs.w	r8, r2, sl
 8001fe6:	eb63 090b 	sbc.w	r9, r3, fp
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ff6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ffa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ffe:	ebb2 0408 	subs.w	r4, r2, r8
 8002002:	eb63 0509 	sbc.w	r5, r3, r9
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	00eb      	lsls	r3, r5, #3
 8002010:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002014:	00e2      	lsls	r2, r4, #3
 8002016:	4614      	mov	r4, r2
 8002018:	461d      	mov	r5, r3
 800201a:	eb14 030a 	adds.w	r3, r4, sl
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	eb45 030b 	adc.w	r3, r5, fp
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002032:	4629      	mov	r1, r5
 8002034:	028b      	lsls	r3, r1, #10
 8002036:	4621      	mov	r1, r4
 8002038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800203c:	4621      	mov	r1, r4
 800203e:	028a      	lsls	r2, r1, #10
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002046:	2200      	movs	r2, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	60fa      	str	r2, [r7, #12]
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe f8c0 	bl	80001d4 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4613      	mov	r3, r2
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800206c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002076:	e002      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCC_GetSysClockFreq+0x184>)
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800207c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002080:	4618      	mov	r0, r3
 8002082:	3740      	adds	r7, #64	; 0x40
 8002084:	46bd      	mov	sp, r7
 8002086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	00f42400 	.word	0x00f42400
 8002094:	017d7840 	.word	0x017d7840

08002098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_RCC_GetHCLKFreq+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000000 	.word	0x20000000

080020b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020b4:	f7ff fff0 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	0a9b      	lsrs	r3, r3, #10
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	08002cc4 	.word	0x08002cc4

080020d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07b      	b.n	80021e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d108      	bne.n	8002104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020fa:	d009      	beq.n	8002110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
 8002102:	e005      	b.n	8002110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fe5c 	bl	8000de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002146:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	ea42 0103 	orr.w	r1, r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0104 	and.w	r1, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f003 0210 	and.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b088      	sub	sp, #32
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	4613      	mov	r3, r2
 80021f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_SPI_Transmit+0x22>
 8002208:	2302      	movs	r3, #2
 800220a:	e126      	b.n	800245a <HAL_SPI_Transmit+0x270>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002214:	f7fe ff24 	bl	8001060 <HAL_GetTick>
 8002218:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d002      	beq.n	8002230 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800222a:	2302      	movs	r3, #2
 800222c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800222e:	e10b      	b.n	8002448 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_SPI_Transmit+0x52>
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002240:	e102      	b.n	8002448 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	88fa      	ldrh	r2, [r7, #6]
 800225a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	88fa      	ldrh	r2, [r7, #6]
 8002260:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002288:	d10f      	bne.n	80022aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002298:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d007      	beq.n	80022c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d0:	d14b      	bne.n	800236a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_SPI_Transmit+0xf6>
 80022da:	8afb      	ldrh	r3, [r7, #22]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d13e      	bne.n	800235e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	881a      	ldrh	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	1c9a      	adds	r2, r3, #2
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002304:	e02b      	b.n	800235e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	d112      	bne.n	800233a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	881a      	ldrh	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	1c9a      	adds	r2, r3, #2
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	86da      	strh	r2, [r3, #54]	; 0x36
 8002338:	e011      	b.n	800235e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800233a:	f7fe fe91 	bl	8001060 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d803      	bhi.n	8002352 <HAL_SPI_Transmit+0x168>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d102      	bne.n	8002358 <HAL_SPI_Transmit+0x16e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800235c:	e074      	b.n	8002448 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ce      	bne.n	8002306 <HAL_SPI_Transmit+0x11c>
 8002368:	e04c      	b.n	8002404 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_SPI_Transmit+0x18e>
 8002372:	8afb      	ldrh	r3, [r7, #22]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d140      	bne.n	80023fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	330c      	adds	r3, #12
 8002382:	7812      	ldrb	r2, [r2, #0]
 8002384:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800239e:	e02c      	b.n	80023fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d113      	bne.n	80023d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80023d4:	e011      	b.n	80023fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023d6:	f7fe fe43 	bl	8001060 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d803      	bhi.n	80023ee <HAL_SPI_Transmit+0x204>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d102      	bne.n	80023f4 <HAL_SPI_Transmit+0x20a>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023f8:	e026      	b.n	8002448 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1cd      	bne.n	80023a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	6839      	ldr	r1, [r7, #0]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fbd9 	bl	8002bc0 <SPI_EndRxTxTransaction>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	77fb      	strb	r3, [r7, #31]
 8002444:	e000      	b.n	8002448 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002446:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002458:	7ffb      	ldrb	r3, [r7, #31]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b088      	sub	sp, #32
 8002466:	af02      	add	r7, sp, #8
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800247e:	d112      	bne.n	80024a6 <HAL_SPI_Receive+0x44>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10e      	bne.n	80024a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2204      	movs	r2, #4
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002490:	88fa      	ldrh	r2, [r7, #6]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4613      	mov	r3, r2
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	68b9      	ldr	r1, [r7, #8]
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f8f1 	bl	8002684 <HAL_SPI_TransmitReceive>
 80024a2:	4603      	mov	r3, r0
 80024a4:	e0ea      	b.n	800267c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_SPI_Receive+0x52>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0e3      	b.n	800267c <HAL_SPI_Receive+0x21a>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024bc:	f7fe fdd0 	bl	8001060 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d002      	beq.n	80024d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
 80024d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024d2:	e0ca      	b.n	800266a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_SPI_Receive+0x7e>
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024e4:	e0c1      	b.n	800266a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2204      	movs	r2, #4
 80024ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	88fa      	ldrh	r2, [r7, #6]
 80024fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252c:	d10f      	bne.n	800254e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800253c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d007      	beq.n	800256c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d162      	bne.n	800263a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002574:	e02e      	b.n	80025d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d115      	bne.n	80025b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f103 020c 	add.w	r2, r3, #12
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025ae:	e011      	b.n	80025d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025b0:	f7fe fd56 	bl	8001060 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d803      	bhi.n	80025c8 <HAL_SPI_Receive+0x166>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d102      	bne.n	80025ce <HAL_SPI_Receive+0x16c>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025d2:	e04a      	b.n	800266a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1cb      	bne.n	8002576 <HAL_SPI_Receive+0x114>
 80025de:	e031      	b.n	8002644 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d113      	bne.n	8002616 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	b292      	uxth	r2, r2
 80025fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002614:	e011      	b.n	800263a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002616:	f7fe fd23 	bl	8001060 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d803      	bhi.n	800262e <HAL_SPI_Receive+0x1cc>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d102      	bne.n	8002634 <HAL_SPI_Receive+0x1d2>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002638:	e017      	b.n	800266a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1cd      	bne.n	80025e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	6839      	ldr	r1, [r7, #0]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fa53 	bl	8002af4 <SPI_EndRxTransaction>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
 8002666:	e000      	b.n	800266a <HAL_SPI_Receive+0x208>
  }

error :
 8002668:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002692:	2301      	movs	r3, #1
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_SPI_TransmitReceive+0x26>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e18a      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x33c>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026b2:	f7fe fcd5 	bl	8001060 <HAL_GetTick>
 80026b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d00f      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0x70>
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026da:	d107      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d103      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x68>
 80026e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d003      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
 80026ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026f2:	e15b      	b.n	80029ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x82>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x82>
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d103      	bne.n	800270e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800270c:	e14e      	b.n	80029ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b04      	cmp	r3, #4
 8002718:	d003      	beq.n	8002722 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2205      	movs	r2, #5
 800271e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	887a      	ldrh	r2, [r7, #2]
 8002732:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	887a      	ldrh	r2, [r7, #2]
 800274a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d007      	beq.n	8002776 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002774:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800277e:	d178      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_SPI_TransmitReceive+0x10a>
 8002788:	8b7b      	ldrh	r3, [r7, #26]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d166      	bne.n	800285c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	881a      	ldrh	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	1c9a      	adds	r2, r3, #2
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b2:	e053      	b.n	800285c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d11b      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x176>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d016      	beq.n	80027fa <HAL_SPI_TransmitReceive+0x176>
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d113      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	1c9a      	adds	r2, r3, #2
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d119      	bne.n	800283c <HAL_SPI_TransmitReceive+0x1b8>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d014      	beq.n	800283c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	b292      	uxth	r2, r2
 800281e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	1c9a      	adds	r2, r3, #2
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002838:	2301      	movs	r3, #1
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800283c:	f7fe fc10 	bl	8001060 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002848:	429a      	cmp	r2, r3
 800284a:	d807      	bhi.n	800285c <HAL_SPI_TransmitReceive+0x1d8>
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d003      	beq.n	800285c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800285a:	e0a7      	b.n	80029ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1a6      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x130>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1a1      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x130>
 8002870:	e07c      	b.n	800296c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_SPI_TransmitReceive+0x1fc>
 800287a:	8b7b      	ldrh	r3, [r7, #26]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d16b      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	7812      	ldrb	r2, [r2, #0]
 800288c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a6:	e057      	b.n	8002958 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d11c      	bne.n	80028f0 <HAL_SPI_TransmitReceive+0x26c>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d017      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x26c>
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d114      	bne.n	80028f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	7812      	ldrb	r2, [r2, #0]
 80028d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d119      	bne.n	8002932 <HAL_SPI_TransmitReceive+0x2ae>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d014      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800292e:	2301      	movs	r3, #1
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002932:	f7fe fb95 	bl	8001060 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800293e:	429a      	cmp	r2, r3
 8002940:	d803      	bhi.n	800294a <HAL_SPI_TransmitReceive+0x2c6>
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d102      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x2cc>
 800294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002956:	e029      	b.n	80029ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1a2      	bne.n	80028a8 <HAL_SPI_TransmitReceive+0x224>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d19d      	bne.n	80028a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f925 	bl	8002bc0 <SPI_EndRxTxTransaction>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d006      	beq.n	800298a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002988:	e010      	b.n	80029ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	e000      	b.n	80029ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80029aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3730      	adds	r7, #48	; 0x30
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d6:	b2db      	uxtb	r3, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029f4:	f7fe fb34 	bl	8001060 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	4413      	add	r3, r2
 8002a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a04:	f7fe fb2c 	bl	8001060 <HAL_GetTick>
 8002a08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	015b      	lsls	r3, r3, #5
 8002a10:	0d1b      	lsrs	r3, r3, #20
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	fb02 f303 	mul.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a1a:	e054      	b.n	8002ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d050      	beq.n	8002ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a24:	f7fe fb1c 	bl	8001060 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d902      	bls.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d13d      	bne.n	8002ab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a52:	d111      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a5c:	d004      	beq.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d107      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a80:	d10f      	bne.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e017      	b.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d19b      	bne.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000000 	.word	0x20000000

08002af4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b08:	d111      	bne.n	8002b2e <SPI_EndRxTransaction+0x3a>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b12:	d004      	beq.n	8002b1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1c:	d107      	bne.n	8002b2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b36:	d12a      	bne.n	8002b8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b40:	d012      	beq.n	8002b68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff ff49 	bl	80029e4 <SPI_WaitFlagStateUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02d      	beq.n	8002bb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e026      	b.n	8002bb6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2101      	movs	r1, #1
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff ff36 	bl	80029e4 <SPI_WaitFlagStateUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01a      	beq.n	8002bb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b82:	f043 0220 	orr.w	r2, r3, #32
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e013      	b.n	8002bb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2101      	movs	r1, #1
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7ff ff23 	bl	80029e4 <SPI_WaitFlagStateUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e000      	b.n	8002bb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <SPI_EndRxTxTransaction+0x7c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <SPI_EndRxTxTransaction+0x80>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0d5b      	lsrs	r3, r3, #21
 8002bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bea:	d112      	bne.n	8002c12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff fef4 	bl	80029e4 <SPI_WaitFlagStateUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e00f      	b.n	8002c32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	d0f2      	beq.n	8002c12 <SPI_EndRxTxTransaction+0x52>
 8002c2c:	e000      	b.n	8002c30 <SPI_EndRxTxTransaction+0x70>
        break;
 8002c2e:	bf00      	nop
  }

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	165e9f81 	.word	0x165e9f81

08002c44 <__libc_init_array>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	4d0d      	ldr	r5, [pc, #52]	; (8002c7c <__libc_init_array+0x38>)
 8002c48:	4c0d      	ldr	r4, [pc, #52]	; (8002c80 <__libc_init_array+0x3c>)
 8002c4a:	1b64      	subs	r4, r4, r5
 8002c4c:	10a4      	asrs	r4, r4, #2
 8002c4e:	2600      	movs	r6, #0
 8002c50:	42a6      	cmp	r6, r4
 8002c52:	d109      	bne.n	8002c68 <__libc_init_array+0x24>
 8002c54:	4d0b      	ldr	r5, [pc, #44]	; (8002c84 <__libc_init_array+0x40>)
 8002c56:	4c0c      	ldr	r4, [pc, #48]	; (8002c88 <__libc_init_array+0x44>)
 8002c58:	f000 f820 	bl	8002c9c <_init>
 8002c5c:	1b64      	subs	r4, r4, r5
 8002c5e:	10a4      	asrs	r4, r4, #2
 8002c60:	2600      	movs	r6, #0
 8002c62:	42a6      	cmp	r6, r4
 8002c64:	d105      	bne.n	8002c72 <__libc_init_array+0x2e>
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6c:	4798      	blx	r3
 8002c6e:	3601      	adds	r6, #1
 8002c70:	e7ee      	b.n	8002c50 <__libc_init_array+0xc>
 8002c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c76:	4798      	blx	r3
 8002c78:	3601      	adds	r6, #1
 8002c7a:	e7f2      	b.n	8002c62 <__libc_init_array+0x1e>
 8002c7c:	08002cd4 	.word	0x08002cd4
 8002c80:	08002cd4 	.word	0x08002cd4
 8002c84:	08002cd4 	.word	0x08002cd4
 8002c88:	08002cd8 	.word	0x08002cd8

08002c8c <memset>:
 8002c8c:	4402      	add	r2, r0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d100      	bne.n	8002c96 <memset+0xa>
 8002c94:	4770      	bx	lr
 8002c96:	f803 1b01 	strb.w	r1, [r3], #1
 8002c9a:	e7f9      	b.n	8002c90 <memset+0x4>

08002c9c <_init>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr

08002ca8 <_fini>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	bf00      	nop
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr
